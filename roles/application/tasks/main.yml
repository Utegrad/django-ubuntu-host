---

- name: apt-get update
  become: True
  apt:
    update_cache: yes

- name: Update installed packages
  become: True
  apt: 
    upgrade: dist
  register: updates_applied

- name: Install common packages
  become: True
  package: name={{ item }} state=latest
  with_items: "{{ packages }}"

- name: UFW OpenSSH 
  become: True
  ufw: rule=limit port=ssh proto=tcp

- name: UFW HTTP Open
  become: True
  ufw: rule=allow port=80 proto=tcp

- name: UFW HTTPS Open
  become: True
  ufw: rule=allow port=443 proto=tcp

- name: UFW Deny Multicast
  become: True
  ufw: rule=deny from_ip=0.0.0.0 to_ip=224.0.0.1

- name: UFW Enabled
  become: True
  ufw: state=enabled

- name: sshd basic configuration
  become: True
  template: src=sshd_config.j2
    dest=/etc/ssh/sshd_config
    backup=yes
    owner=0 group=0 mode=0600
    validate='/usr/sbin/sshd -T -f %s'
  notify: restart sshd

- name: Import application vault variables
  include_vars: "{{ item }}"
  with_items:
    - "vault.yml"

- name: Create Django User
  become: True
  user:
    name: "{{ django_user }}"
    state: present
    create_home: yes
    password: "{{ django_user_password }}"

- name: Django user .ssh directory
  become: True
  become_user: "{{ django_user }}"
  file:
    path: ~/.ssh
    state: directory
    mode: '0700'

- name: Django User Deploy Key
  become: yes
  become_user: "{{ django_user }}"
  copy:
    src: roles/application/files/deploy_key
    dest: ~/.ssh/id_rsa
    owner: "{{ django_user }}"
    mode: '0600'
    decrypt: yes

- name: Application Directory
  become: True
  become_user: "{{ django_user }}"
  file:
    path: "{{ application_path }}"
    state: directory
    mode: '0755'

- name: Checkout Git code
  become: True
  become_user: "{{ django_user }}"
  git:
    repo: "{{ git_repo }}"
    dest: "{{ git_dest }}"
    ssh_opts: "-o StrictHostKeyChecking=no"

- name: Install virtualenv
  become: True
  pip:
    name: virtualenv

- name: Create virtualenv
  become: True
  become_user: "{{ django_user }}"
  pip:
    requirements: "{{ git_dest }}/requirements.txt"
    virtualenv: "{{ git_dest }}/venv"
    virtualenv_python: "{{ virtualenv_python }}"

- name: gunicorn.service file
  become: True
  template:
    src: gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service
    owner: root
    group: root
    mode: '0644'
  register: gunicorn_service

- name: gunicorn.socket file
  become: True
  copy:
    src: gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket
    owner: root
    group: root
    mode: '0644'
  register: gunicorn_socket

- name: Restart gunicorn and systemd daemon
  systemd:
    daemon_reload: yes
    name: "{{ item }}"
    state: restarted
  with_items:
    - gunicorn.socket
    - gunicorn.service
  when: gunicorn_socket.changed or gunicorn_service.changed

- name: remove default nginx conf file
  become: True
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: restart nginx
    
- name: Create nginx site-available file
  become: True
  template:
    src: vasaargenti.conf.j2
    dest: /etc/nginx/sites-available/vasaargenti.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart nginx

- name: Symlink nginx conf file
  become: True
  file:
    src: /etc/nginx/sites-available/vasaargenti.conf
    dest: /etc/nginx/sites-enabled/vasaargenti.conf
    state: link
    owner: root
    group: root


